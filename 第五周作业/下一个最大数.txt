package github;
/*
 * 现在我们有一个int数组，请你找出数组中每个元素的下一个比它大的元素。
 *  给定一个int数组A及数组的大小n，请返回一个int数组，
 *  代表每个元素比他大的下一个元素,若不存在则为-1。保证数组中元素均为正整数.
 * >测试样例：
 * > [11,13,10,5,12,21,3],7
*  >
*  返回：
*  >[13,21,12,12,21,-1,-1]
*  _____________________________________________________________________________________________________
*  思路
*从后向前维护一个递减栈。 
*最右边的那个值肯定没有最大值，所以肯定是-1。初始栈为-1。 
*从后向前计算： 
*（1）如果当前元素大于栈顶元素，则栈顶元素退出，如果还是大于栈顶元素，
*继续退出，一直遍历栈到-1或者小于栈顶元素。
*这个元素就是就是当前值的下一个比较大的元素。 
*（2）如果当前元素小于栈顶元素，栈顶元素就是当前值的下一个比较大的元素。 
*t再简化一下代码如下
 */

public class nextMaxNum {
           public  vector<int> findNext(vector<int> A, int n)   
		    {  
		       
		        stack<int> st;  
		        st.push(-1);  
		        vector<int> result;  
		        for(int i=A.size()-1;i>=0;i--)  
		        {  
		            while(st.top()!=-1&&st.top()<=A[i])  
		                st.pop();  
		            result.push_back(st.top());  
		            st.push(A[i]);  
		        }  
		        reverse(result.begin(),result.end());  
		        return result;  
		    }  
}
